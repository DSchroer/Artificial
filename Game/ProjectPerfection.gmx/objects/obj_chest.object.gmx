<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_chest_closed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_interact_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>triggered = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(triggered)
{
    exit;
}
triggered = true;
sprite_index = spr_chest_open;

if(instance_exists(obj_progress))
{
    var number_drops = irandom_range(1, 2);
    
    var x_off;
    var y_off;
    var gun_positions = 0;
    
    // Guns    
    for(var i = 0; i &lt; 6 &amp;&amp; number_drops &gt; 0; i++)
    {
        switch(i)
        {
        case 0:
            x_off = -1;        
            y_off = 1;
            break;
        case 1:
            x_off = 0;        
            y_off = -1;
            break;
        case 2:
            x_off = 0;        
            y_off = 1;
            break;
        case 3:
            x_off = -1;        
            y_off = -1;
            break;
        case 4:
            x_off = -2;        
            y_off = 0;
            break;
        default:
            x_off = 1;        
            y_off = 1;
            break;
            
        }            
    
        var gun = instance_create(x + x_off * 64, y + y_off * 64, obj_item);
        gun.data = inventory_spawn_gun_ext(roll_power(), item_quality.uncommon);
        if(level_can_place_item(gun, gun.x, gun.y))
        {
            number_drops--;      
        }
        else
        {
            with(gun)
            {
                instance_destroy();
            }
        }
        
    }
    
    var healing_item_tries = 20;
    var remaining_items = irandom_range(1, 3);
    while(healing_item_tries &gt; 0 &amp;&amp; remaining_items &gt; 0)
    {
        x_off = irandom_range(0, 2) - 1;
        y_off = irandom_range(0, 2) - 1;
        var instance = instance_create(x + 64 * x_off, y + 64 * y_off, obj_health_can);
        if(level_can_place_item(instance, instance.x, instance.y))
        {
            remaining_items--;      
        }
        else
        {
            with(instance)
            {
                instance_destroy();
            }
        }
        healing_item_tries--;
    }
        
    
    // Component    
    var component_item_tries = 20;
    var remaining_components = irandom_range(1, 1);
    while(component_item_tries &gt; 0 &amp;&amp; remaining_components &gt; 0)
    {
        x_off = irandom_range(0, 2) - 1;
        y_off = irandom_range(0, 2) - 1;
        var instance = instance_create(x + 64 * x_off, y + 64 * y_off, obj_component);
        if(level_can_place_item(instance, instance.x, instance.y))
        {
            remaining_components--;      
        }
        else
        {
            with(instance)
            {
                instance_destroy();
            }
        }
        component_item_tries--;
    }
    sfx_play_volume(snd_door_lock_open, false, 1);
}
event_inherited();

instance_create(x, y, obj_chest_open);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var point = level_get_spawn_point();
if(point != noone)
{
   x = point.x;
   y = point.y;
   with(point)
   {
       instance_destroy();
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
