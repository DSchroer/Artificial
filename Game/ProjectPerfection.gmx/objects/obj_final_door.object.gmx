<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_door_background</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x -= 5;

animation_state = -1;
animation_timer = 0;
animation_max = 300;
is_closed = obj_progress.cube_parts &lt; 4;
if(is_closed)
{
    // Create walls
    var yp = y + sprite_get_height(spr_door_background) - 64 - 6;
    for(var i = 0; i &lt;= 4; i++)
    {
        walls[i] = instance_create(x + i * 64, yp, obj_invisible_wall);        
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(animation_timer &gt; 0)
{
    animation_timer--;
}
else
{
    animation_state = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(obj_progress.cube_parts &gt;= 4)
{
    obj_player.x = 4.5 * 64;
    obj_player.y = 4.5 * 64;

    room_goto(rm_boss_final);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_door_background, -1, x, y);

if(animation_state == -1 &amp;&amp; obj_progress.cube_parts &lt; 4)
{
    draw_sprite(spr_door_left, -1, x, y);
    draw_sprite(spr_door_middle, -1, x, y);
    draw_sprite(spr_door_right, -1, x, y);
    
    if(obj_progress.cube_parts &gt;= 1)
    {
        draw_sprite(spr_door_left_trim, -1, x, y);
    }
    if(obj_progress.cube_parts &gt;= 2)
    {
        draw_sprite(spr_door_middle_trim, -1, x, y);
    }
    if(obj_progress.cube_parts &gt;= 3)
    {
        draw_sprite(spr_door_right_trim, -1, x, y);
    }
}

if(animation_state == 1)
{
    // Open
    percent_open = animation_timer / animation_max;
    inverse_percent = 1 - percent_open;

    draw_sprite_part(spr_door_left, -1, 16 + 90 * inverse_percent, 0, 90 * percent_open, sprite_get_height(spr_door_left), x + 16, y);
    draw_sprite_part(spr_door_middle, -1, 0, 68, sprite_get_width(spr_door_middle), 126 * percent_open, x, y + 68 + 126 * inverse_percent);
    draw_sprite_part(spr_door_right, -1, 102, 0, 90 * percent_open, sprite_get_height(spr_door_right), x + 102 + 90 * inverse_percent, y);
    
    draw_sprite_part(spr_door_left_trim, -1, 16 + 90 * inverse_percent, 0, 90 * percent_open, sprite_get_height(spr_door_left_trim), x + 16, y);
    draw_sprite_part(spr_door_middle_trim, -1, 0, 68, sprite_get_width(spr_door_middle_trim), 126 * percent_open, x, y + 68 + 126 * inverse_percent);
    draw_sprite_part(spr_door_right_trim, -1, 102, 0, 90 * percent_open, sprite_get_height(spr_door_right_trim), x + 102 + 90 * inverse_percent, y);
    
}

if(animation_state == 2)
{
    //Close
    percent_open = (animation_max - animation_timer) / animation_max;
    inverse_percent = 1 - percent_open;

    draw_sprite_part(spr_door_left, -1, 16 + 90 * inverse_percent, 0, 90 * percent_open, sprite_get_height(spr_door_left), x + 16, y);
    draw_sprite_part(spr_door_middle, -1, 0, 68, sprite_get_width(spr_door_middle), 126 * percent_open, x, y + 68 + 126 * inverse_percent);
    draw_sprite_part(spr_door_right, -1, 102, 0, 90 * percent_open, sprite_get_height(spr_door_right), x + 102 + 90 * inverse_percent, y);

    if(obj_progress.cube_parts &gt;= 1)
    {
        draw_sprite_part(spr_door_left_trim, -1, 16 + 90 * inverse_percent, 0, 90 * percent_open, sprite_get_height(spr_door_left_trim), x + 16, y);
    }
    if(obj_progress.cube_parts &gt;= 2)
    {
        draw_sprite_part(spr_door_middle_trim, -1, 0, 68, sprite_get_width(spr_door_middle_trim), 126 * percent_open, x, y + 68 + 126 * inverse_percent);
    }
    if(obj_progress.cube_parts &gt;= 3)
    {
        draw_sprite_part(spr_door_right_trim, -1, 102, 0, 90 * percent_open, sprite_get_height(spr_door_right_trim), x + 102 + 90 * inverse_percent, y);
    }
}

draw_sprite(spr_door_border, -1, x, y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
