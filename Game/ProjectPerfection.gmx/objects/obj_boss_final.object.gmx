<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_final_boss</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
current_health = 20000;
max_health = 20000;
if(!tutorial_done())
{
    max_health = 2000000;
    current_health = max_health;
}

prev = "";

sm_init("idle");

lazer = inventory_create_weapon();
lazer[weapon_index.modifier] = weapon_modifier.rail;
lazer[weapon_index.bullet_sprite] = spr_rail;
lazer[weapon_index.damage] = 200;
lazer[weapon_index.bullet_speed] = 0;

bolt = inventory_create_weapon();
bolt[weapon_index.modifier] = weapon_modifier.normal;
bolt[weapon_index.bullet_sprite] = spr_bullet;
bolt[weapon_index.damage] = 100;

kill = inventory_create_weapon();
kill[weapon_index.modifier] = weapon_modifier.rail;
kill[weapon_index.bullet_sprite] = spr_rail;
kill[weapon_index.damage] = 500;
kill[weapon_index.bullet_sprite_yscale] = 4;
kill[weapon_index.bullet_speed] = 0;

mele = inventory_create_weapon();
mele[weapon_index.modifier] = weapon_modifier.sword;
mele[weapon_index.bullet_sprite] = sprite_index;
mele[weapon_index.bullet_sprite_xscale] = image_xscale;
mele[weapon_index.bullet_sprite_yscale] = image_yscale;
mele[weapon_index.bullet_sprite_alpha] = 0;
mele[weapon_index.damage] = 200;
mele[weapon_index.bullet_speed] = 0;

volume_mod = 0.2;
ds_list_add(hurt_sounds, snd_heart_hit); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isomorphic_set_depth();

if(!tutorial_done())
{    
    exit;
}

var state = sm_get_state();
if(player_exists())
{
    switch(state)
    {
        case "paused":
            speed = 0;
            break;
        case "idle":
            final_idle();
            break;
        case "spawn":
            final_spawn();
            break;
        case "lazer":
            final_lazer();
            break;
        case "bolt":
            final_bolt();
            break;
        case "kill":
            final_kill();
            break;
        case "move":
            final_move();
            break;
        case "mele":
            final_mele();
            break;
        case "jump":
            final_jump();
            break;
    }
}

//entity_collision();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sfx_play_volume(snd_heart_death, false, 1);
google_analytics_event("game", "finished");
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
