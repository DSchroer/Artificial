<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>entity_init();
event_inherited();
max_health = 2000;
current_health = 2000;

sm_init("idle");

basic = inventory_create_weapon();
basic[weapon_index.modifier] = weapon_modifier.plasma;
basic[weapon_index.damage] = 50;
basic[weapon_index.accuracy] = 30;
basic[weapon_index.bullet_sprite] = spr_azar_rock;

slam = inventory_create_weapon();
slam[weapon_index.modifier] = weapon_modifier.sword;
slam[weapon_index.damage] = 75;
slam[weapon_index.bullet_sprite] = spr_wave;
slam[weapon_index.bullet_speed] = 0;

wave = inventory_create_weapon();
wave[weapon_index.modifier] = weapon_modifier.scatter;
wave[weapon_index.damage] = 75;
wave[weapon_index.bullet_sprite_xscale] = 2;
wave[weapon_index.bullet_sprite_yscale] = 2;
wave[weapon_index.bullet_sprite] = spr_azar_rock;
wave[weapon_index.accuracy] = 10;

rock = inventory_create_weapon();
rock[weapon_index.modifier] = weapon_modifier.plasma;
rock[weapon_index.damage] = 150;
rock[weapon_index.bullet_sprite_xscale] = 3;
rock[weapon_index.bullet_sprite_yscale] = 3;
rock[weapon_index.bullet_sprite] = spr_azar_rock;
rock[weapon_index.accuracy] = 0;


stage = 1;

volume_mod = 1.4;
//ds_list_add(hurt_sounds, snd_enemy_rock1);  
//ds_list_add(hurt_sounds, snd_enemy_rock2);
//ds_list_add(hurt_sounds, snd_enemy_rock3); // &lt;--- death sound?
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isomorphic_set_depth();

var state = sm_get_state();

if(player_exists())
{
    switch(state)
    {
        case "paused":
            break;
        case "idle":
            azar_idle();
            break;
        case "attack":
            azar_attack();
            break;
        case "move":
            azar_move();
            break;
    }
}

entity_collision();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(random(3) &lt; 1)
{
    var gun = instance_create(x, y, obj_item);
    gun.data = inventory_spawn_gun(obj_progress.progress + 1);
}
instance_create(x, y, obj_cube);
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
