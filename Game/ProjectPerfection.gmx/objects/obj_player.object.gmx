<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>obj_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
player_init();

gun_angle = 0;
surface = surface_create(256, 256);

window_set_cursor(cr_none);
cursor_sprite = spr_aim;

dead = false;

base_x = 128;
base_y = 200;

gun_x = -15;
gun_y = -61;
gun_base_dist = 13;
gun_dist = 13;
gun_recoil = 0;

arm_1_x = -20;
arm_1_y = -61;
arm_1_delta_dist = 8;
arm_1_angle_off = -25;

arm_2_x = 1;
arm_2_y = -61
arm_2_delta_dist = 27;
arm_2_angle_off = -15;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drop weapons
for(var i = 0; i &lt; 4; i++)
{
        var out = inventory_swap(self, i, -1);
        
        if(out != -1 &amp;&amp; is_array(out))
        {
            var dx = random(64) - 32;
            var dy = random(64) - 32;
        
            var item = instance_create(x + dx, y + dy, obj_item);
            item.data = out;
        }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0,0, obj_fade_out);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>current_health = max_health;
x = 1600;
y = 320;

dead = false;

with(obj_camera)
{
    zoom = 1;
    current_zoom = 1;
    zoom_speed = 0.25;
}

if(room == rm_tutorial)
{
    room_goto(rm_tutorial);
    exit;
}

inventory_swap(self, inventory_slot.weapon1, -1);
inventory_swap(self, inventory_slot.weapon2, -1);

with(obj_level)
{
    instance_destroy();
}

room_goto(rm_hub);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isomorphic_set_depth();

entity_dampening();
entity_move_input();                                                                               

if(is_paused())
{
    exit;
}

if(inventory[selected_slot] != -1 &amp;&amp; is_array(inventory[selected_slot]))
{
    inventory[selected_slot] = player_update_gun(inventory[selected_slot]);
}

if(!dead)
{
    gun_angle = point_direction(x, y - 64, mouse_x, mouse_y);
}

gun_recoil = min(gun_recoil, gun_base_dist);
gun_dist = gun_base_dist - gun_recoil;
if(gun_recoil &gt; 0)
{
    gun_recoil-=5;
    gun_recoil = max(gun_recoil, 0);
}

player_update_shield();

debug_show_string("in0: " + string_array(inventory[0]));
debug_show_string("in1: " + string_array(inventory[1]));

debug_show_string("fps: " + string(fps));

if(keymap_check(keycode.interact) &amp;&amp; !dead)
{
    var inter = interact_any(128);
    if(inter == noone)
    {
        var obj = instance_place(x, y, obj_item);
        var data = -1;
        if(obj)
        {
            data = obj.data;
        }
        var out = noone;
        if(is_gun(data))
        {
            out = inventory_pickup_weapon(data);
        }else if(is_shield(data))
        {
            out = -1;
            player_activate_shield();
        }
        
        with(obj)
        {
            instance_destroy();
        }
        if(out != -1 &amp;&amp; is_array(out))
        {
            var item = instance_create(x,y, obj_item);
            item.data = out;
        }
    
    }else{
        interact_trigger(inter);
    }
}

if(invincible &gt; 0)
{
    --invincible;
}

if(keymap_check(keycode.fire) &amp;&amp; !dead)
{
    player_fire();
}

if(keymap_check(keycode.reload))
{
    inventory[selected_slot] = player_reload(inventory[selected_slot]);
}

if(keymap_check(keycode.escape))
{
    if(!is_paused() &amp;&amp; room != rm_transition)
    {
        instance_create(0,0,obj_pause);
    }
}

entity_collision();

player_set_sprite();

player_render_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!dead)
{
    dead = true;
    alarm[0] = 60 * 4;
    alarm[1] = 60 * 3;
    alarm[2] = 60 * 2;
    with(obj_camera)
    {
        zoom_speed = 0.03;
        zoom = 0.25;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player_take_damage();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_speed = 60;

if(instance_number(obj_spawn_player) &gt; 0)
{
    x = obj_spawn_player.x;
    y = obj_spawn_player.y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!is_paused())
{
    ui_draw_inventory();
    ui_draw_health();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


sprite_scale = shader_get_uniform(sdr_world, "sprite_size");
tex = surface_get_texture(surface);
tex_h = texture_get_texel_height(tex);
tex_w = texture_get_texel_width(tex);

shader_set(sdr_world);
shader_set_uniform_f(sprite_scale, tex_w, tex_h);
draw_surface(surface, x - base_x, y - base_y);
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="117">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_boss_1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="116">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_sandbox);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
