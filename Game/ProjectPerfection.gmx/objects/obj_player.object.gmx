<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>obj_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
player_init();

sfx_bkg_init();

gun_angle = 0;
surface = surface_create(256, 256);

window_set_cursor(cr_none);
cursor_sprite = spr_aim;

gun_x = -5;
gun_y = -67;
gun_dist = 13;

arm_1_x = -10;
arm_1_y = - 67;
arm_1_delta_dist = 13;
arm_1_angle_off = -25;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sfx_bkg_update();

isomorphic_set_depth();

entity_dampening();
entity_move_input();                                                                               

if(is_paused())
{
    exit;
}

if(inventory[selected_slot] != -1 &amp;&amp; is_array(inventory[selected_slot]))
{
    inventory[selected_slot] = player_update_gun(inventory[selected_slot]);
}

gun_angle = point_direction(x, y - 64, mouse_x, mouse_y);

player_update_shield();

debug_show_string("in0: " + string_array(inventory[0]));
debug_show_string("in1: " + string_array(inventory[1]));
debug_show_string("in2: " + string_array(inventory[2]));
debug_show_string("in3: " + string_array(inventory[3]));
debug_show_string("in4: " + string_array(inventory[4]));

debug_show_string("fps: " + string(fps));

if(keymap_check(keycode.interact))
{
    var inter = interact_any(128);
    if(inter == noone)
    {
        var obj = instance_place(x, y, obj_item);
        var data = -1;
        if(obj)
        {
            data = obj.data;
        }
        var out = noone;
        if(is_gun(data))
        {
            out = inventory_pickup_weapon(data);
        }else if(is_shield(data))
        {
            out = inventory_swap(self, inventory_slot.shield, data);
        }
        
        with(obj)
        {
            instance_destroy();
        }
        if(out != -1 &amp;&amp; is_array(out))
        {
            var item = instance_create(x,y, obj_item);
            item.data = out;
        }
    
    }else{
        interact_trigger(inter);
    }
}

if(invincible &gt; 0)
{
    --invincible;
}

if(keymap_check(keycode.fire))
{
    player_fire();
}

if(keyboard_check_pressed(vk_escape))
{
    if(!is_paused() &amp;&amp; room != rm_transition)
    {
        instance_create(0,0,obj_pause);
    }
}

entity_collision();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>current_health = max_health;
x = 1600;
y = 320;

if(room == rm_tutorial)
{
    room_goto(rm_tutorial);
    exit;
}

inventory_swap(self, inventory_slot.weapon1, -1);
inventory_swap(self, inventory_slot.weapon2, -1);
inventory_swap(self, inventory_slot.weapon3, -1);
inventory_swap(self, inventory_slot.weapon4, -1);

with(obj_level)
{
    instance_destroy();
}

room_goto(rm_hub);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player_take_damage();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_speed = 60;

if(instance_number(obj_spawn_player) &gt; 0)
{
    x = obj_spawn_player.x;
    y = obj_spawn_player.y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!is_paused())
{
    ui_draw_inventory();
    ui_draw_health();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(!surface_exists(surface))
{
    surface = surface_create(256, 256);
}

surface_set_target(surface);
draw_clear_alpha(c_red, 0);



var yscale = 0.75;
if(gun_angle &gt; 90 &amp;&amp; gun_angle &lt; 270)
{
    image_xscale = -1;
    yscale = -0.75;
}else{
    image_xscale = 1;
}

if(gun_angle &lt;= 180)
{
    sprite_index = spr_player_back;
}else{
    sprite_index = spr_player;
}

var distance = 13;

if(view_current == 0)
{
    if(gun_angle &lt; 180)
    {
        if(is_array(inventory[selected_slot]))
        {
            draw_weapon(inventory[selected_slot], 128 + (distance * dcos(gun_angle)), 128 - 58 - (distance * dsin(gun_angle)), 0.75, yscale, gun_angle, 1);
        }
    }

    draw_sprite_ext(sprite_index, image_index, 128, 127, image_xscale, image_yscale, image_angle, c_white, image_alpha);
    
    if(gun_angle &gt;= 180)
    {
        if(is_array(inventory[selected_slot]))
        {
            draw_weapon(inventory[selected_slot], 128 + (gun_x * image_xscale) + (gun_dist * dcos(gun_angle)), 128 + gun_y - (gun_dist * dsin(gun_angle)), 0.75, yscale, gun_angle, 1);
        
            draw_ik(128 + (arm_1_x * image_xscale), 128 + arm_1_y, 128 + (gun_x * image_xscale) + ((gun_dist + arm_1_delta_dist) * dcos(gun_angle + (arm_1_angle_off * image_xscale))), 128 + gun_y - ((gun_dist + arm_1_delta_dist) * dsin(gun_angle + (arm_1_angle_off * image_xscale))), 23-6, 22-5, image_xscale &gt; 0, spr_player_arm, spr_player_arm_bottom);
        }
    }
    /*
    if(shield_active &amp;&amp; remaining_shield &gt; 0) 
    {
        draw_sprite(spr_shield, 0, x - 32, y - 128);
    }
    */
}

surface_reset_target();

sprite_scale = shader_get_uniform(sdr_world, "sprite_size");
tex = surface_get_texture(surface);
tex_h = texture_get_texel_height(tex);
tex_w = texture_get_texel_width(tex);

shader_set(sdr_world);
shader_set_uniform_f(sprite_scale, tex_w, tex_h);
draw_surface(surface, x - 128, y - 128);
shader_reset();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="117">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_boss_1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="116">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_sandbox);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inventory[selected_slot] = player_reload(inventory[selected_slot]);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="71">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
