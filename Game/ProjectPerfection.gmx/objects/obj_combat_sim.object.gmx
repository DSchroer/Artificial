<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
enum sim_state
{
    start,
    items_pickedup,
    begin_combat1,
    combat1_inprogress,
    waiting_for_combat2,
    begin_combat2,
    combat2_inprogress,
    waiting_for_combat3,
    begin_combat3,
    combat3_inprogress,
    waiting_for_combat4,
    begin_combat4,
    combat4_inprogress,
    waiting_for_combat5,
    begin_combat5,
    combat5_inprogress,
    combat_done
}


room_state = sim_state.start;





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_state = sim_state.begin_combat5;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
ui_textbox_queue("|broadcast Broadcasting System: `br |white Enemies are unpredicatable. It is always best to be prepared for anything.");
ui_flash_textbox();
room_state = sim_state.begin_combat4;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ui_textbox_queue("|broadcast Broadcasting System: `br |white Don't forget that pillars, rocks, and dashing can all be used to avoid enemy attacks.");
ui_flash_textbox(); 
room_state = sim_state.begin_combat3;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///

ui_textbox_queue("|broadcast Broadcasting System: `br |white Your gun will reload automatically when it runs out of bullets. However, you can also reload automatically with |key R |white and swap your weapons with |key Mouse Wheel");
ui_textbox_queue("|broadcast Broadcasting System: `br |white Don't let enemies surround you, or the damage can add up quickly. ");
ui_flash_textbox(); 
room_state = sim_state.begin_combat2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
ui_textbox_queue("|broadcast Broadcasting System: `br |white In your travels, you will meet many enemies. You must be prepared to neutralize them at any cost by pressing |key LMB |white to shoot your gun. ");
ui_flash_textbox(); 
room_state = sim_state.begin_combat1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_player)
{
    if(current_health &lt; 50)
    {
        current_health = 50;
    }
}

var can_continue = false; 

with(obj_player)
{
    can_continue = is_shield_active &amp;&amp; (inventory[inventory_slot.weapon1] != -1 || inventory[inventory_slot.weapon2] != -1);
}

if(!can_continue)
{
    exit;
}

if(!instance_exists(obj_enemy))
{
    if(room_state == sim_state.start)
    {
        room_state = sim_state.items_pickedup;       
        alarm[0] = 60;
        
        for(var i = 0; i &lt; instance_number(obj_tutorial_spawner); i++)
        {
            var spawner = instance_find(obj_tutorial_spawner, i);
            spawner.active = true;
        }
    }
    else if(room_state == sim_state.begin_combat1 &amp;&amp; !ui_textbox_open())
    {
        room_state = sim_state.combat1_inprogress;
        var spawnx;
        var spawny;
        for(var i = 0; i &lt; instance_number(obj_tutorial_spawner); i++)
        {
            var spawner = instance_find(obj_tutorial_spawner, i);
            if(spawner.position == 1)
            {
                instance_create(spawner.x + sprite_get_xoffset(object_get_sprite(obj_grunt)), spawner.y + sprite_get_yoffset(object_get_sprite(obj_grunt)), obj_grunt);
                break;   
            }
        }        
    }
    else if(room_state == sim_state.combat1_inprogress)
    {
        alarm[1] = 60;
        room_state = sim_state.waiting_for_combat2;
    }
    else if(room_state == sim_state.begin_combat2 &amp;&amp; !ui_textbox_open())
    {
        room_state = sim_state.combat2_inprogress;
        
        for(var i = 0; i &lt; instance_number(obj_tutorial_spawner); i++)
        {
            var spawner = instance_find(obj_tutorial_spawner, i);
            if(spawner.position &gt;= 5)
            {
                instance_create(spawner.x + sprite_get_xoffset(object_get_sprite(obj_grunt)), spawner.y + sprite_get_yoffset(object_get_sprite(obj_grunt)), obj_grunt);
            }
        }   
    }
    else if(room_state == sim_state.combat2_inprogress)
    {
        alarm[2] = 60;
        room_state = sim_state.waiting_for_combat3;
    }
    else if(room_state == sim_state.begin_combat3 &amp;&amp; !ui_textbox_open())
    {
        room_state = sim_state.combat3_inprogress;
        
        for(var i = 0; i &lt; instance_number(obj_tutorial_spawner); i++)
        {
            var spawner = instance_find(obj_tutorial_spawner, i);
            if(spawner.position &lt; 5)
            {
                instance_create(spawner.x + sprite_get_xoffset(object_get_sprite(obj_grunt)), spawner.y + sprite_get_yoffset(object_get_sprite(obj_grunt)), obj_grunt);
            }
        }   
    }
    else if(room_state == sim_state.combat3_inprogress)
    {
        alarm[3] = 90;
        room_state = sim_state.waiting_for_combat4;
    }
    else if(room_state == sim_state.begin_combat4 &amp;&amp; !ui_textbox_open())
    {
        room_state = sim_state.combat4_inprogress;
        for(var i = 0; i &lt; instance_number(obj_tutorial_spawner); i++)
        {
            var spawner = instance_find(obj_tutorial_spawner, i);
            if(spawner.position == 2 || spawner.position == 3 || spawner.position == 5 || spawner.position == 8)
            {
                instance_create(spawner.x + sprite_get_xoffset(object_get_sprite(obj_grunt)), spawner.y + sprite_get_yoffset(object_get_sprite(obj_grunt)), obj_grunt);
            }
        }  
    }
    else if(room_state == sim_state.combat4_inprogress)
    {
        alarm[4] = 90;
        room_state = sim_state.waiting_for_combat5;
    }
    else if(room_state == sim_state.begin_combat5 &amp;&amp; !ui_textbox_open())
    {
        room_state = sim_state.combat5_inprogress;
        for(var i = 0; i &lt; instance_number(obj_tutorial_spawner); i++)
        {
            var spawner = instance_find(obj_tutorial_spawner, i);
            if(spawner.position == 1 || spawner.position == 4 || spawner.position == 6 || spawner.position == 7)
            {
                instance_create(spawner.x + sprite_get_xoffset(object_get_sprite(obj_grunt)), spawner.y + sprite_get_yoffset(object_get_sprite(obj_grunt)), obj_grunt);
            }
        }  
    }
    else if(room_state == sim_state.combat5_inprogress)
    {
        room_state = sim_state.combat_done;
        ui_textbox_queue("NOTE TO TESTER: This is where other exciting things would happen");
    }
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
