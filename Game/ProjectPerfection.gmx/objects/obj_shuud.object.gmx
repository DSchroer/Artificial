<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_worm_head</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50000</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
current_health = 15000;
max_health = 15000;
iframes = 0;

speed_mod = 1;

image_xscale = 2;
image_yscale = 2;

sm_init("retreat");

var body = instance_create(x, y, obj_shuud_body);
body.target = self;

for(var i = 0; i &lt; 7; i++)
{
    var inst = instance_create(x, y, obj_shuud_body);
    inst.target = body;
    inst.image_xscale = image_xscale;
    inst.image_yscale = image_yscale;
    body = inst;
}

body.sprite_index = spr_worm_tail;

mele = inventory_create_weapon();
mele[weapon_index.modifier] = weapon_modifier.sword;
mele[weapon_index.bullet_sprite] = sprite_index;
mele[weapon_index.bullet_sprite_xscale] = image_xscale;
mele[weapon_index.bullet_sprite_yscale] = image_yscale;
mele[weapon_index.bullet_sprite_alpha] = 0;
mele[weapon_index.damage] = 200;
mele[weapon_index.bullet_speed] = 0;

scream = inventory_create_weapon();
scream[weapon_index.modifier] = weapon_modifier.scatter;
scream[weapon_index.bullet_sprite] = spr_bullet;
scream[weapon_index.damage] = 750;
scream[weapon_index.accuracy] = 10;
sweat[weapon_index.bullet_speed] = 15;

sweat = inventory_create_weapon();
sweat[weapon_index.modifier] = weapon_modifier.plasma;
sweat[weapon_index.bullet_sprite] = spr_plasma;
sweat[weapon_index.damage] = 150;
sweat[weapon_index.accuracy] = 0;
sweat[weapon_index.bullet_speed] = 10;

moist = inventory_create_weapon();
moist[weapon_index.modifier] = weapon_modifier.plasma;
moist[weapon_index.bullet_sprite] = spr_plasma;
moist[weapon_index.damage] = 150;
moist[weapon_index.accuracy] = 0;
moist[weapon_index.bullet_speed] = 10;

beam = inventory_create_weapon();
beam[weapon_index.modifier] = weapon_modifier.rail;
beam[weapon_index.bullet_sprite] = spr_rail;
beam[weapon_index.damage] = 200;
beam[weapon_index.accuracy] = 0;

phase = false;
volume_mod = 1.0;
ds_list_add(hurt_sounds, snd_shuude_hit); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if(!phase &amp;&amp; ui_get_boss_health_percent() &lt; 0.5)
{
    phase = true;
    sfx_play_volume(snd_shuude_phase, false, 1.0);
}
            
if(iframes &gt; 0)
{
    iframes -= 1;
}

if(current_health / max_health &lt; 0.5)
{
    speed_mod = 1.35;
}

var state = sm_get_state();
debug_show_string(state);
if(player_exists())
{
    switch(state)
    {
        case "paused":
            speed = 0;
            break;
        case "approach":
            shud_approach();
            break;
        case "retreat":
            shud_retreat();
            break;
        case "scream":
            shud_scream();
            break;
        case "sweat":
            shud_sweat();
            break;
        case "moist":
            shud_moist();
            break;
        case "beam":
            shud_beam();
            break;
        case "turn":
            shud_turn();
            break;
    }
}

image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sfx_play_volume(snd_shuude_death, false, 0.75);

with(obj_shuud_body)
{
    instance_destroy();
}
x = room_width / 2;
y = room_height / 2;
kill_boss(4);
roll_boss_loot(4);

if(random(1) &lt; 0.15)
{
    instance_create(x - 250 + random(500), y + random(300), obj_shuud_voice);
}

obj_progress.progress++;
if(obj_progress.cube_parts &lt; 4)
{
    var cube = instance_create(x, y, obj_cube);
    cube.sprite_index = spr_cube_piece4;
}
else
{
    instance_create(room_width / 2, room_height / 2 - 192, obj_hub_teleporter);
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if(iframes == 0)
{
    iframes = 10;
    with(obj_shuud_body)
    {
        if(hit_stage == 0)
        {
            hit_stage = 2;
        }
    }
    event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
