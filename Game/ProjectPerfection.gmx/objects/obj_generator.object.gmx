<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>generator_init(100, 100);

generator_add_option_ext(rm_stub_1, 15, 15, stub_flags.no_door_down);
generator_add_option(rm_stub_2, 19, 19);
generator_add_option_ext(rm_stub_3, 23, 23, 0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var x_off = ds_list_find_value(room_x_list, itteration);
var y_off = ds_list_find_value(room_y_list, itteration);

generator_copy_instances(custom_room, x_off * 64, y_off * 64);
generator_copy_tiles(custom_room, x_off * 64, y_off * 64);

itteration += 1;

if(itteration &lt; ds_list_size(room_list))
{
    var goto = ds_list_find_value(room_list, itteration);
    room_goto(goto);
}else{
    level = generator_create_level();
    generator_cleanup();
    
    with(obj_minimap)
    {
        map_set_level(other.level);
    }
    
    persistent = false;
    room_goto(custom_room);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
while(ds_list_size(room_list) &lt;= 5)
{
    generator_clear();
    generator_set_room(rm_stub_1, 0, 0, 15, 15, 0, 0);
    generator_populate(0, 0, 15, 15, 0, 0);
}

generator_add_doors();
generator_create_spawn_map();


constructing = true;
persistent = true;

custom_room = room_add();

var end_key = generator_spawn_exit(custom_room);
generator_use_room(end_key);

for(var i = 0; i &lt; 3; i++)
{
    var p = generator_random_room();
    generator_spawn_at(p, custom_room, obj_item);
    generator_spawn_at(p, custom_room, obj_clear_entities);
    generator_use_room(p);
}

room_set_height(custom_room, height * 64);
room_set_width(custom_room, width * 64);
room_set_persistent(custom_room, false);

instance_create(0,0,obj_cloner);

itteration = 0;
room_goto(ds_list_find_value(room_list, 0));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!debug_mode)
{
    randomize();
}

if(!constructing)
{
    event_user(0);
}else{
    event_user(1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
