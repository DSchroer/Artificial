<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_turret</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>entity_init();
event_inherited();
max_health = 50;
current_health = 50;

sm_init("idle");

weapon = inventory_create_weapon();
weapon[weapon_index.modifier] = weapon_modifier.rocket;
weapon[weapon_index.damage] = 10;
weapon[weapon_index.bullet_sprite] = spr_bullet;
weapon[weapon_index.accuracy] = 30;
weapon[weapon_index.sprite_count] = 2;
weapon[weapon_index.sprite_count + 1] = spr_rifle_base;
weapon[weapon_index.sprite_count + 2] = c_white;
weapon[weapon_index.sprite_count + 3] = spr_rifle_assault;
weapon[weapon_index.sprite_count + 4] = c_white;

volume_mod = 1.4;
//ds_list_add(hurt_sounds, snd_enemy_rock1);  
//ds_list_add(hurt_sounds, snd_enemy_rock2);
//ds_list_add(hurt_sounds, snd_enemy_rock3); // &lt;--- death sound?
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isomorphic_set_depth();

var state = sm_get_state();

if(player_exists())
{
    switch(state)
    {
        case "idle":
        case "paused":
            eg_idle();
            break;
        case "approach":
        case "retreat":
        case "attack":
            turret_attack();
            speed = 0;
            break;
    }
}

entity_collision();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(instance_exists(obj_progress))
{
    if(random(20) &lt; 1)
    {
        var health_can = instance_create(x, y, obj_health_can);
    }
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var yscale = 1;
if(obj_player.x &lt; x)
{
    yscale = -1;
}

switch(hit_stage)
{
    case 0:
    {
        draw_outline_begin();
        draw_outline_update(sprite_index, false);
        draw_self();
        draw_outline_end();
        draw_weapon(weapon, x, y - 32, 1, yscale, point_direction(x, y, obj_player.x, obj_player.y), 1);
        break;
        
    }
    case 1:
    {
        --hit_stage;
        shader_set(sdr_fill);
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_black, 1);
        draw_weapon_color(weapon, x, y - 32, 1, yscale, point_direction(x, y, obj_player.x, obj_player.y), 1, c_black);
        shader_reset();
        break;
    }
    default:
    {
        --hit_stage;
        shader_set(sdr_fill);
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_white, 1);
        draw_weapon_color(weapon, x, y - 32, 1, yscale, point_direction(x, y, obj_player.x, obj_player.y), 1, c_white);
        shader_reset();
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
