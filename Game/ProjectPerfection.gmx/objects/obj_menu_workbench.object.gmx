<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_menu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
index = -1;
created = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(created)
{
    workbench_destroy_menu();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var is_open = false;
with(obj_player)
{
    is_open = open_workbench;
}

if(is_open &amp;&amp; !created)
{
    workbench_create_menu();
}
else if(!is_open &amp;&amp; created)
{
    workbench_destroy_menu();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exit
with(obj_player)
{
    open_workbench = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Upgrade Delay
with(obj_player)
{
    var component_count = save_get_value(obj_save_data, "components", 0);
    var current_level = save_get_value(obj_save_data, "shield_delay_powerup", 0);
    if(component_count &lt; 3 || current_level &gt;= 4)
    {
        exit;
    }
    save_set_value(obj_save_data, "components", component_count - 3);
    player_levelup_shield(shield_powerup.recharge_delay);
}
workbench_update_tooltips();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Upgrade Recharge

with(obj_player)
{
    var component_count = save_get_value(obj_save_data, "components", 0);
    var current_level = save_get_value(obj_save_data, "shield_recharge_powerup", 0);
    if(component_count &lt; 3 || current_level &gt;= 4)
    {
        exit;
    }
    save_set_value(obj_save_data, "components", component_count - 3);
    player_levelup_shield(shield_powerup.recharge_rate);
}
workbench_update_tooltips();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Upgrade HP
with(obj_player)
{
    var component_count = save_get_value(obj_save_data, "components", 0);
    var current_level = save_get_value(obj_save_data, "shield_health_powerup", 0);
    if(component_count &lt; 3 || current_level &gt;= 4)
    {
        exit;
    }
    save_set_value(obj_save_data, "components", component_count - 3);
    player_levelup_shield(shield_powerup.max_health);
}
workbench_update_tooltips();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_player)
{
    if(!open_workbench)
    {
        exit;
    }
}
if(!created)
{
    exit;
}

// Manage button states
var num_components = save_get_value(obj_save_data, "components", 0);
if(num_components &lt; 3 || save_get_value(obj_save_data, "shield_health_powerup", 0) &gt;= 4)
{   
    button_upgrade_health.active_sprite = spr_button_gray;
}
if(num_components &lt; 3 || save_get_value(obj_save_data, "shield_recharge_powerup", 0) &gt;= 4)
{   
    button_upgrade_recharge.active_sprite = spr_button_gray;
}
if(num_components &lt; 3 || save_get_value(obj_save_data, "shield_delay_powerup", 0) &gt;= 4)
{   
    button_upgrade_delay.active_sprite = spr_button_gray;
}
// X positions
//button_upgrade_health.x = (display_get_gui_width() / 2 - (button_upgrade_health.bbox_right - button_upgrade_health.bbox_left) / 2) - sprite_get_width(button_upgrade_health.sprite_index) * button_upgrade_health.scale * 0.5;
//button_upgrade_recharge.x = (display_get_gui_width() / 2 - (button_upgrade_recharge.bbox_right - button_upgrade_recharge.bbox_left) / 2) - sprite_get_width(button_upgrade_recharge.sprite_index) * button_upgrade_recharge.scale * 0.5;
//button_upgrade_delay.x = (display_get_gui_width() / 2 - (button_upgrade_delay.bbox_right - button_upgrade_delay.bbox_left) / 2) - sprite_get_width(button_upgrade_delay.sprite_index) * button_upgrade_delay.scale * 0.5;

// Drawing
var width = display_get_gui_width();
var height = display_get_gui_height();
// Background
draw_sprite(spr_workbench_ui, -1, background_pos_x, background_pos_y);

// Title
draw_set_color(c_white);
var scale = 2.5;
var text_width = string_width("Workbench") * scale;
var text_height = string_height("Workbench") * scale;
draw_text_transformed((display_get_gui_width() - text_width) / 2, background_pos_y + 20, "Workbench", scale, scale, 0);
// Components
scale = 1;
var components_str = "Components: " + string(save_get_value(obj_save_data, "components", 0));
text_width = string_width(components_str) * scale;
draw_text_transformed((display_get_gui_width() - text_width) / 2, background_pos_y + text_height * scale + 30, components_str, scale, scale, 0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
