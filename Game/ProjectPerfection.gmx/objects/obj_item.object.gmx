<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_item</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>data = inventory_spawn_gun(1);
hitbox_set = false;
sfx_played = !tutorial_done();
animation_index = 0;
sparkles = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isomorphic_set_depth();
if(!hitbox_set)
{
    if(is_gun(data))
    {
        mask_index = data[weapon_index.sprite_count + 1];
    }else if(is_shield(data))
    {
        mask_index = data[shield_index.world_sprite];
    }
    hitbox_set = true;
}

if(!sfx_played)
{
    sfx_played = true;
   // sfx_play(snd_gun_drop, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var point = level_get_spawn_point();
if(point != noone)
{
    x = point.x;
    y = point.y;
    with(point)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(collision_point(mouse_x, mouse_y, self, false, false))
{
    var uix = ((mouse_x - view_xview[0])/view_wview) * display_get_gui_width();
    var uiy = ((mouse_y - view_yview[0])/view_hview) * display_get_gui_height();
    var gun_data = data;      
    if(is_gun(data))
    {
        with(obj_player)
        {   
            if(is_gun(inventory[selected_slot]))
            {
                ui_draw_weapon_comparison(uix + 16, uiy + 16, inventory[selected_slot], gun_data);
            }
            else
            {
                ui_draw_weapon_tooltip2(uix + 16, uiy + 16, gun_data, false);
            }
        }
    }
}
else if(place_meeting(x, y, obj_player))
{
    var uix = ((obj_player.x - view_xview[0])/view_wview) * display_get_gui_width();
    var uiy = ((obj_player.y - view_yview[0])/view_hview) * display_get_gui_height();
    var gun_data = data;    
    if(is_gun(data))
    {
        with(obj_player)
        {   
            if(is_gun(inventory[selected_slot]))
            {
                ui_draw_weapon_comparison(uix + 16, uiy + 16, inventory[selected_slot], gun_data);
            }
            else
            {
                ui_draw_weapon_tooltip2(uix + 16, uiy + 16, gun_data, false);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if(is_gun(data))
{
    draw_weapon(data, x, y, 1, 1, 0, 1);
    if(sparkles)
    {
        draw_sprite_ext(spr_sparkle, floor(animation_index), x, y - 16, 1.0, 1.0, 0, c_white, 1.0); 
        animation_index = (animation_index + 0.1) % sprite_get_number(spr_sparkle);
    }
}else if(is_shield(data))
{
    draw_shield(data, x, y, 1, 1, 0, 1);
    if(sparkles)
    {
        draw_sprite_ext(spr_sparkle, floor(animation_index), x, y, 1.0, 1.0, 0, c_white, 1.0); 
        animation_index = (animation_index + 0.1) % sprite_get_number(spr_sparkle);
    }
}else{
    draw_self();
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
