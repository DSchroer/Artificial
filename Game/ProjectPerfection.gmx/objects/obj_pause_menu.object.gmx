<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_menu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
index = 0;

menu_stack = ds_stack_create();
ds_stack_push(menu_stack, menu_type.main);

full_screen = save_get_value(obj_game_save, "fullscreen", false);
last_full_screen = window_get_fullscreen();

menu_create_pause();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(ds_stack_top(menu_stack) == menu_type.options)
{
    menu_destroy_options_menu();
}else{
    menu_destroy_pause();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(window_get_fullscreen() != last_full_screen)
{
    last_full_screen = window_get_fullscreen();
    
    if(ds_stack_top(menu_stack) == menu_type.options)
    {
        menu_destroy_options_menu();
        var yp = (display_get_gui_height() / 2) - 200
        menu_create_options_menu(yp);
    }else{
        menu_destroy_pause();
        menu_create_pause();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open options

index = 0;
ds_stack_push(menu_stack, menu_type.options);
menu_destroy_pause();
var yp = (display_get_gui_height() / 2) - 200
menu_create_options_menu(yp);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Close current menu

index = 0;
var closing_menu = ds_stack_pop(menu_stack);

menu_destroy_options_menu();

menu_create_pause();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fullscreen toggle

full_screen = !full_screen;
window_set_fullscreen(full_screen);
save_set_value(obj_game_save, "fullscreen", full_screen);
save_flush(obj_game_save);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Apply settings

slider_sound.percent = max(0, min(1, slider_sound.percent));
slider_music.percent = max(0, min(1, slider_music.percent));
slider_ctrlr.percent = max(0, min(1, slider_ctrlr.percent));

sfx_set_volume(slider_sound.percent);
save_set_value(obj_game_save, "fx_volume", slider_sound.percent);

sfx_bkg_set_volume(slider_music.percent);
save_set_value(obj_game_save, "music_volume", slider_music.percent);

save_set_value(obj_game_save, "controller_sensitivity", slider_ctrlr.percent);

save_flush(obj_game_save);

sfx_set_volume(slider_sound.percent);
sfx_bkg_set_volume(slider_music.percent);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// vysnc

if(event_data == 0)
{
    var vsync = save_get_value(obj_game_save, "vsync", false);
    vsync = !vsync;
    display_reset(0, vsync);
    
    if(vsync)
    {
        button_vsync.text = "Disable VSync";
    }else{
        button_vsync.text = "Enable VSync";
    }
    
    save_set_value(obj_game_save, "vsync", vsync);
    save_flush(obj_game_save);
}else if(event_data == 1)
{
    var auto_aim = save_get_value(obj_game_save, "aim", false);
    auto_aim = !auto_aim;
    
    if(auto_aim)
    {
        button_aim.text = "Disable Aimbot";
    }else{
        button_aim.text = "Enable Aimbot";
    }
    
    save_set_value(obj_game_save, "aim", auto_aim);
    save_flush(obj_game_save);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Goto hub
if(!tutorial_done() || room == rm_boss_final)
{
    exit;
}

with(obj_level)
{
    instance_destroy();
}

room_goto(rm_hub);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Goto Main Menu

save_flush(obj_save_data);
with(all)
{
    instance_destroy();
}

room_goto(rm_main_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Resume

with(obj_pause)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var scale = 2.5;
var text_width = string_width("Paused") * scale;
var text_height = string_height("Paused") * scale;
var yp = (display_get_gui_height() / 2) - 200;
draw_text_transformed((display_get_gui_width() / 2) - (text_width / 2), yp - 100, "Paused", scale, scale, 0);

if(instance_exists(obj_player))
{
    if(surface_exists(obj_player.surface))
    {
        var w = display_get_gui_width();
        
        draw_set_alpha(0.5);
        draw_rectangle_colour(0, 75, 260, 560, c_black, c_black, c_black, c_black, false);
        draw_rectangle_colour(w - 260, 75, w, 560, c_black, c_black, c_black, c_black, false);
        draw_set_alpha(1);
        draw_surface_ext(obj_player.surface, 10 - 75, 10, 1.5, 1.5, 0, c_white, 1);
        
        draw_set_halign(fa_center);
        draw_text(130, 380, "Subject Name: J");
        draw_text(130, 410, "Level: " + string(save_get_value(obj_save_data, "player_level", 1)));
        draw_text(130, 440, "HP: " + string(round(obj_player.current_health)) + "/" + string(round(obj_player.max_health)));
        draw_text(130, 470, "Shield: " + string(round(obj_player.remaining_shield)) + "/"+ string(round(obj_player.shield_max_health)));
        draw_text(130, 500, "Recharge Rate: " + string(round(obj_player.shield_recharge_rate)));
        draw_text(130, 530, "Recharge Delay: " + string(round(obj_player.shield_recharge_delay)));
        
        var cube = save_get_value(obj_save_data, "cube", 0);
        if(tutorial_done())
        {
            cube++;
        }
        draw_sprite_ext(cube_get_sprite(), 0, w - 130 - 72, 232 - 72, 1.5, 1.5, 0, c_white, 1);
        draw_text(w - 130, 380, "Cube Pieces: " + string(min(cube, 5)) + " of 5");
        
        draw_set_halign(fa_left);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
